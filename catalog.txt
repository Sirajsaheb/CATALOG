import org.json.JSONObject;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

public class ShamirSecretSharing {

    private static final SecureRandom random = new SecureRandom();

    // Method to generate random coefficients for the polynomial
    public static BigInteger[] generateCoefficients(BigInteger secret, int degree) {
        BigInteger[] coefficients = new BigInteger[degree];
        coefficients[0] = secret; // constant term is the secret
        for (int i = 1; i < degree; i++) {
            coefficients[i] = new BigInteger(secret.bitLength(), random);
        }
        return coefficients;
    }

    // Method to evaluate the polynomial at a given x
    public static BigInteger evaluatePolynomial(BigInteger x, BigInteger[] coefficients) {
        BigInteger result = BigInteger.ZERO;
        for (int i = coefficients.length - 1; i >= 0; i--) {
            result = result.multiply(x).add(coefficients[i]);
        }
        return result;
    }

    // Generate n shares
    public static List<BigInteger[]> generateShares(BigInteger secret, int n, int k) {
        List<BigInteger[]> shares = new ArrayList<>();
        BigInteger[] coefficients = generateCoefficients(secret, k);

        for (int i = 1; i <= n; i++) {
            BigInteger x = BigInteger.valueOf(i);
            BigInteger y = evaluatePolynomial(x, coefficients);
            shares.add(new BigInteger[]{x, y});
        }
        return shares;
    }

    // Lagrange interpolation to reconstruct the secret from k shares
    public static BigInteger reconstructSecret(List<BigInteger[]> shares) {
        BigInteger secret = BigInteger.ZERO;

        for (int i = 0; i < shares.size(); i++) {
            BigInteger[] shareI = shares.get(i);
            BigInteger xi = shareI[0];
            BigInteger yi = shareI[1];

            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;

            for (int j = 0; j < shares.size(); j++) {
                if (i != j) {
                    BigInteger[] shareJ = shares.get(j);
                    BigInteger xj = shareJ[0];

                    numerator = numerator.multiply(xj.negate()); // (xj - xi)
                    denominator = denominator.multiply(xi.subtract(xj));
                }
            }
            BigInteger term = yi.multiply(numerator).multiply(denominator.modInverse(secret)).mod(secret);
            secret = secret.add(term).mod(secret);
        }
        return secret;
    }

    public static void main(String[] args) {
        // Input JSON
        String jsonInput = "{ \"keys\": { \"n\": 4, \"k\": 3 }, " +
                "\"1\": { \"base\": \"10\", \"value\": \"4\" }, " +
                "\"2\": { \"base\": \"2\", \"value\": \"111\" }, " +
                "\"3\": { \"base\": \"10\", \"value\": \"12\" }, " +
                "\"6\": { \"base\": \"4\", \"value\": \"213\" } }";

        JSONObject jsonObject = new JSONObject(jsonInput);
        JSONObject keys = jsonObject.getJSONObject("keys");
        int n = keys.getInt("n");
        int k = keys.getInt("k");

        // Convert values from different bases to decimal and sum as the "secret"
        BigInteger secret = BigInteger.ZERO;
        for (int i = 1; i <= n; i++) {
            JSONObject baseInfo = jsonObject.optJSONObject(String.valueOf(i));
            if (baseInfo != null) {
                int base = baseInfo.getInt("base");
                String value = baseInfo.getString("value");

                // Convert each value to decimal
                BigInteger decimalValue = new BigInteger(value, base);
                secret = secret.add(decimalValue);
            }
        }
        
        System.out.println("Secret: " + secret);

        // Generate shares
        List<BigInteger[]> shares = generateShares(secret, n, k);
        System.out.println("Shares:");
        for (BigInteger[] share : shares) {
            System.out.println("x = " + share[0] + ", y = " + share[1]);
        }

        // Use k shares to reconstruct the secret
        List<BigInteger[]> subsetShares = shares.subList(0, k); // Selecting the first k shares for testing
        BigInteger reconstructedSecret = reconstructSecret(subsetShares);
        System.out.println("Reconstructed Secret: " + reconstructedSecret);
    }
}